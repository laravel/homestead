#!/usr/bin/env bash
##################################
# Usage:                         #
# sudo ./bin/homestead/wsl-init  #
##################################
export DEBIAN_FRONTEND=noninteractive
export NODE_MAJOR="20"
export PHP_VERSION="8.1"

echo "What is your WSL user name?"
read WSL_USER_NAME

echo "What is your WSL user group? (Same as username if you're unsure)"
read WSL_USER_GROUP

# Update Package List
apt-get update

# Update System Packages
apt-get upgrade -y

# Force Locale
echo "LC_ALL=en_US.UTF-8" >> /etc/default/locale
locale-gen en_US.UTF-8

apt-get install -y software-properties-common curl

# Install PHP PPAs
apt-add-repository ppa:ondrej/php -y
# NodeJS
apt-get update
apt-get install -y ca-certificates curl gnupg
mkdir -p /etc/apt/keyrings
curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list
apt-get update
apt-get install nodejs -y
# PostgreSQL
tee /etc/apt/sources.list.d/pgdg.list <<END
deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main
END

wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -

## Update Package Lists
apt-get update

# Install Some Basic Packages
apt-get install -y build-essential dos2unix gcc git git-lfs libmcrypt4 libpcre3-dev libpng-dev unzip make \
python3-pip re2c supervisor unattended-upgrades whois vim libnotify-bin pv mcrypt bash-completion zsh imagemagick

## Set My Timezone
#ln -sf /usr/share/zoneinfo/UTC /etc/localtime

# PHP
apt-get install -y --allow-change-held-packages \
php$PHP_VERSION php$PHP_VERSION-bcmath php$PHP_VERSION-bz2 php$PHP_VERSION-cgi php$PHP_VERSION-cli php$PHP_VERSION-common php$PHP_VERSION-curl php$PHP_VERSION-dba php$PHP_VERSION-dev \
php$PHP_VERSION-enchant php$PHP_VERSION-fpm php$PHP_VERSION-gd php$PHP_VERSION-gmp php$PHP_VERSION-imap php$PHP_VERSION-interbase php$PHP_VERSION-intl php$PHP_VERSION-ldap \
php$PHP_VERSION-mbstring php$PHP_VERSION-mysql php$PHP_VERSION-odbc php$PHP_VERSION-opcache php$PHP_VERSION-pgsql php$PHP_VERSION-phpdbg php$PHP_VERSION-pspell php$PHP_VERSION-readline \
php$PHP_VERSION-snmp php$PHP_VERSION-soap php$PHP_VERSION-sqlite3 php$PHP_VERSION-sybase php$PHP_VERSION-tidy php$PHP_VERSION-xml php$PHP_VERSION-xsl \
php$PHP_VERSION-zip php$PHP_VERSION-imagick php$PHP_VERSION-memcached php$PHP_VERSION-redis php$PHP_VERSION-xdebug php$PHP_VERSION-dev php$PHP_VERSION-swoole

# Fixed php fpm bind listening socket - no such file issue.
mkdir -p /run/php
touch /run/php/php$PHP_VERSION-fpm.sock

# Set php$PHP_VERSION as default
update-alternatives --set php /usr/bin/php$PHP_VERSION
update-alternatives --set php-config /usr/bin/php-config$PHP_VERSION
update-alternatives --set phpize /usr/bin/phpize$PHP_VERSION

# Install Composer
curl -sS https://getcomposer.org/installer | php
mv composer.phar /usr/local/bin/composer
chown -R $WSL_USER_NAME:$WSL_USER_NAME /home/$WSL_USER_NAME/.config

## Install Global Packages
su $WSL_USER_NAME <<'EOF'
/usr/local/bin/composer global require "laravel/envoy=^2.0"
/usr/local/bin/composer global require "laravel/installer=^4.2"
/usr/local/bin/composer global config --no-plugins allow-plugins.slince/composer-registry-manager true
/usr/local/bin/composer global require "slince/composer-registry-manager=^2.0"
EOF

# Configure php.ini for CLI
sed -i "s/error_reporting = .*/error_reporting = E_ALL/" /etc/php/$PHP_VERSION/cli/php.ini
sed -i "s/display_errors = .*/display_errors = On/" /etc/php/$PHP_VERSION/cli/php.ini
sed -i "s/memory_limit = .*/memory_limit = 512M/" /etc/php/$PHP_VERSION/cli/php.ini
sed -i "s/;date.timezone.*/date.timezone = UTC/" /etc/php/$PHP_VERSION/cli/php.ini

# Install Nginx
apt-get install -y --allow-downgrades --allow-remove-essential --allow-change-held-packages nginx

rm /etc/nginx/sites-enabled/default
rm /etc/nginx/sites-available/default

# Create a configuration file for Nginx overrides.
mkdir -p /home/$WSL_USER_NAME/.config/nginx
chown -R $WSL_USER_NAME:$WSL_USER_GROUP /home/$WSL_USER_NAME
touch /home/$WSL_USER_NAME/.config/nginx/nginx.conf
ln -sf /home/$WSL_USER_NAME/.config/nginx/nginx.conf /etc/nginx/conf.d/nginx.conf

# Setup Some PHP-FPM Options
sed -i "s/error_reporting = .*/error_reporting = E_ALL/" /etc/php/$PHP_VERSION/fpm/php.ini
sed -i "s/display_errors = .*/display_errors = On/" /etc/php/$PHP_VERSION/fpm/php.ini
sed -i "s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/" /etc/php/$PHP_VERSION/fpm/php.ini
sed -i "s/memory_limit = .*/memory_limit = 512M/" /etc/php/$PHP_VERSION/fpm/php.ini
sed -i "s/upload_max_filesize = .*/upload_max_filesize = 100M/" /etc/php/$PHP_VERSION/fpm/php.ini
sed -i "s/post_max_size = .*/post_max_size = 100M/" /etc/php/$PHP_VERSION/fpm/php.ini
sed -i "s/;date.timezone.*/date.timezone = UTC/" /etc/php/$PHP_VERSION/fpm/php.ini

printf "[openssl]\n" | tee -a /etc/php/$PHP_VERSION/fpm/php.ini
printf "openssl.cainfo = /etc/ssl/certs/ca-certificates.crt\n" | tee -a /etc/php/$PHP_VERSION/fpm/php.ini

printf "[curl]\n" | tee -a /etc/php/$PHP_VERSION/fpm/php.ini
printf "curl.cainfo = /etc/ssl/certs/ca-certificates.crt\n" | tee -a /etc/php/$PHP_VERSION/fpm/php.ini

# Setup xdebug
echo "xdebug.mode = off" >> /etc/php/$PHP_VERSION/mods-available/xdebug.ini
echo "xdebug.discover_client_host = true" >> /etc/php/$PHP_VERSION/mods-available/xdebug.ini
echo "xdebug.client_port = 9003" >> /etc/php/$PHP_VERSION/mods-available/xdebug.ini
echo "xdebug.max_nesting_level = 512" >> /etc/php/$PHP_VERSION/mods-available/xdebug.ini

# Setup opcache
echo "opcache.enable = 1" >> /etc/php/$PHP_VERSION/mods-available/opcache.ini
echo "opcache.enable_cli = 1" >> /etc/php/$PHP_VERSION/mods-available/opcache.ini
echo "opcache.revalidate_freq = 0" >> /etc/php/$PHP_VERSION/mods-available/opcache.ini

# Disable XDebug On The CLI
phpdismod -s cli xdebug

# Set The Nginx & PHP-FPM User
sed -i "s/user www-data;/user $WSL_USER_NAME;/" /etc/nginx/nginx.conf
sed -i "s/# server_names_hash_bucket_size.*/server_names_hash_bucket_size 64;/" /etc/nginx/nginx.conf

sed -i "s/user = www-data/user = $WSL_USER_NAME/" /etc/php/$PHP_VERSION/fpm/pool.d/www.conf
sed -i "s/group = www-data/group = $WSL_USER_NAME/" /etc/php/$PHP_VERSION/fpm/pool.d/www.conf

sed -i "s/listen\.owner.*/listen.owner = $WSL_USER_NAME/" /etc/php/$PHP_VERSION/fpm/pool.d/www.conf
sed -i "s/listen\.group.*/listen.group = $WSL_USER_NAME/" /etc/php/$PHP_VERSION/fpm/pool.d/www.conf
sed -i "s/;listen\.mode.*/listen.mode = 0666/" /etc/php/$PHP_VERSION/fpm/pool.d/www.conf

service nginx restart
service php$PHP_VERSION-fpm restart

# Add $WSL_USER_NAME User To WWW-Data
usermod -a -G www-data $WSL_USER_NAME
id $WSL_USER_NAME
groups $WSL_USER_GROUP

# Install Node
apt-get install -y nodejs
/usr/bin/npm install -g npm
/usr/bin/npm install -g yarn
# Install chokidar for Octane -- watch
/usr/bin/npm install -g chokidar

# Install SQLite
apt-get install -y sqlite3 libsqlite3-dev

# Disable Apparmor
# See https://github.com/laravel/homestead/issues/629#issue-247524528
service apparmor stop
update-rc.d -f apparmor remove

# Remove MySQL
apt-get remove -y --purge mysql-server mysql-client mysql-common
apt-get autoremove -y
apt-get autoclean

rm -rf /var/lib/mysql/*
rm -rf /var/log/mysql
rm -rf /etc/mysql

# Add Maria PPA
curl -LsS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | bash

echo "mariadb-server mysql-server/data-dir select ''" | debconf-set-selections
echo "mariadb-server mysql-server/root_password password secret" | debconf-set-selections
echo "mariadb-server mysql-server/root_password_again password secret" | debconf-set-selections

mkdir  /etc/mysql
touch /etc/mysql/debian.cnf

# Install MariaDB
apt-get install -y mariadb-server mariadb-client

# Configure Maria Remote Access and ignore db dirs
sed -i "s/bind-address            = 127.0.0.1/bind-address            = 0.0.0.0/" /etc/mysql/mariadb.conf.d/50-server.cnf
cat > /etc/mysql/mariadb.conf.d/50-server.cnf << EOF
[mysqld]
bind-address = 0.0.0.0
ignore-db-dir = lost+found
#general_log
#general_log_file=/var/log/mysql/mariadb.log
EOF

export MYSQL_PWD=secret

mysql --user="root" -e "GRANT ALL ON *.* TO root@'0.0.0.0' IDENTIFIED BY 'secret' WITH GRANT OPTION;"
service mysql restart

mysql --user="root" -e "CREATE USER IF NOT EXISTS 'homestead'@'0.0.0.0' IDENTIFIED BY 'secret';"
mysql --user="root" -e "GRANT ALL ON *.* TO 'homestead'@'0.0.0.0' IDENTIFIED BY 'secret' WITH GRANT OPTION;"
mysql --user="root" -e "GRANT ALL ON *.* TO 'homestead'@'%' IDENTIFIED BY 'secret' WITH GRANT OPTION;"
mysql --user="root" -e "FLUSH PRIVILEGES;"
service mysql restart

mysql_upgrade --user="root" --verbose --force
service mysql restart

unset MYSQL_PWD

# Install Postgres 15
apt-get install -y postgresql-15 postgresql-server-dev-15 postgresql-15-postgis-3 postgresql-15-postgis-3-scripts

# Configure Postgres Users
sudo -u postgres psql -c "CREATE ROLE homestead LOGIN PASSWORD 'secret' SUPERUSER INHERIT NOCREATEDB NOCREATEROLE NOREPLICATION;"

# Configure Postgres Remote Access
sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" /etc/postgresql/15/main/postgresql.conf
echo "host    all             all             10.0.2.2/32               md5" | tee -a /etc/postgresql/15/main/pg_hba.conf

sudo -u postgres /usr/bin/createdb --echo --owner=homestead homestead
service postgresql restart
# Disable to lower initial overhead
systemctl disable postgresql

# Install Redis, Memcached, & Beanstalk
apt-get install -y redis-server memcached
systemctl enable redis-server
service redis-server start

# Install & Configure MailHog
wget --quiet -O /usr/local/bin/mailhog https://github.com/mailhog/MailHog/releases/download/v0.2.1/MailHog_linux_amd64
chmod +x /usr/local/bin/mailhog

tee /etc/systemd/system/mailhog.service <<EOL
[Unit]
Description=Mailhog
After=network.target
[Service]
User=$WSL_USER_NAME
Group=$WSL_USER_GROUP
ExecStart=/usr/bin/env /usr/local/bin/mailhog > /dev/null 2>&1 &
Restart=always
RestartSec=10
SyslogIdentifier=mailhog
StandardOutput=syslog
StandardError=syslog
Environment=MH_API_BIND_ADDR=0.0.0.0:8025 MH_UI_BIND_ADDR=0.0.0.0:8025 MH_SMTP_BIND_ADDR=0.0.0.0:1025
[Install]
WantedBy=multi-user.target
EOL

systemctl daemon-reload
systemctl enable mailhog

# One last upgrade check
apt-get upgrade -y

# Clean Up
apt -y autoremove
apt -y clean
chown -R $WSL_USER_NAME:$WSL_USER_GROUP /home/$WSL_USER_NAME
chown -R $WSL_USER_NAME:$WSL_USER_GROUP /usr/local/bin

# Add Composer Global Bin To Path
printf "\nPATH=\"$(sudo su - $WSL_USER_NAME -c 'composer config -g home 2>/dev/null')/vendor/bin:\$PATH\"\n" | tee -a /home/$WSL_USER_NAME/.profile

apt-get -y autoremove;
apt-get -y clean;

# What are you doing Ubuntu?
# https://askubuntu.com/questions/1250974/user-root-cant-write-to-file-in-tmp-owned-by-someone-else-in-20-04-but-can-in
sysctl fs.protected_regular=0

# Setup Homestead repo
su $WSL_USER_NAME -c 'composer install'
su $WSL_USER_NAME -c 'bash init.sh'
